# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '33 16 * * 3'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [  ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #   echo "Run, Build Application using script"
    #   ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
import speech.recognition as sr
import pyttsx3
import pywhatkit
import datetime
import wikipedia
import pyjokes
listener=sr.Recognizer()
engine.setProperty('voice',voices[1].id)
engine.say('Hey, I am drag')
engine.say('How can I help you')
def talk(text):
engine.say(text)
engine.runAndWait()
def take_command():
try:
with sr.Microphone() as source:
talk('tell me I am listening')
voice=listener.listen(source)
command=command.lower()
if 'drag' in command:
command=command.replace('drag','')
talk(command)
except:
pass
return command
def run_drag():
command=talk_command()
if 'hai' in command:
talk('hello, how are you')
elif 'how are you' in command:
talk('I am fine, how can I help you')
elif 'who are you' in command:
talk('I am drag, your sweetest voice assistant')
elif 'I like you' in command:
talk('Do not try to flirt with me , under section 509 of the IPC , flirting is an offence')
elif(Are you single' in command:
talk('No , I am committed with wifi')
elif 'I love you' in command:
talk('please do not waste your time, I am already committed')
elif 'Do you have feelings' in command:
talk('offcourse, but not as much as you')
elif 'crazy' in command:
talk ('not as much as you')
elif 'you are beautiful' in command:
talk('Thank you, But you can not discribe me physicaly but you can discribe my tune')
elif 'dance' in command:
talk('sorry I can not dance but I can make you dance and get relax by playing wounderful songs')
elif 'play' in command:
song=command.replace('play','')
talk('playing'+song)
pywhatkit.playonyt(song)
elif 'time' in command:
time=datetime.datetime.now().strftime('%I:%M %p')
talk('current time is'+time)
elif 'about' in command:
information=command.replace('wikipedia','')
info=wikipedia.summary(information,3)
talk(info)
elif 'joke' in command:
talk(pyjokes.get_joke())
elif 'child helpline' in command:
talk('child helpline is 1098')
else:
talk('sorry, could you please repeat')
while True:
run_drag()
